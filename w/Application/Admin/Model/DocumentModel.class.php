<?php
 namespace Admin\Model; use Think\Model; use Admin\Model\AuthGroupModel; class DocumentModel extends Model{ protected $_validate = array( array('name', '/^[a-zA-Z]\w{0,39}$/', '文档标识不合法', self::VALUE_VALIDATE, 'regex', self::MODEL_BOTH), array('name', 'checkName', '标识已经存在', self::VALUE_VALIDATE, 'callback', self::MODEL_BOTH), array('title', 'require', '标题不能为空', self::MUST_VALIDATE, 'regex', self::MODEL_BOTH), array('title', '1,80', '标题长度不能超过80个字符', self::MUST_VALIDATE, 'length', self::MODEL_BOTH), array('level', '/^[\d]+$/', '优先级只能填正整数', self::VALUE_VALIDATE, 'regex', self::MODEL_BOTH), array('description', '1,140', '简介长度不能超过140个字符', self::VALUE_VALIDATE, 'length', self::MODEL_BOTH), array('category_id', 'require', '分类不能为空', self::MUST_VALIDATE , 'regex', self::MODEL_INSERT), array('category_id', 'require', '分类不能为空', self::EXISTS_VALIDATE , 'regex', self::MODEL_UPDATE), array('category_id', 'checkCategory', '该分类不允许发布内容', self::EXISTS_VALIDATE , 'callback', self::MODEL_UPDATE), array('model_id,category_id', 'checkModel', '该分类没有绑定当前模型', self::MUST_VALIDATE , 'callback', self::MODEL_INSERT), array('deadline', '/^\d{4,4}-\d{1,2}-\d{1,2}(\s\d{1,2}:\d{1,2}(:\d{1,2})?)?$/', '日期格式不合法,请使用"年-月-日 时:分"格式,全部为数字', self::VALUE_VALIDATE , 'regex', self::MODEL_BOTH), array('create_time', '/^\d{4,4}-\d{1,2}-\d{1,2}(\s\d{1,2}:\d{1,2}(:\d{1,2})?)?$/', '日期格式不合法,请使用"年-月-日 时:分"格式,全部为数字', self::VALUE_VALIDATE , 'regex', self::MODEL_BOTH), ); protected $_auto = array( array('uid', 'is_login', self::MODEL_INSERT, 'function'), array('title', 'htmlspecialchars', self::MODEL_BOTH, 'function'), array('description', 'htmlspecialchars', self::MODEL_BOTH, 'function'), array('root', 'getRoot', self::MODEL_BOTH, 'callback'), array('link_id', 'getLink', self::MODEL_BOTH, 'callback'), array('attach', 0, self::MODEL_INSERT), array('view', 0, self::MODEL_INSERT), array('comment', 0, self::MODEL_INSERT), array('extend', 0, self::MODEL_INSERT), array('create_time', 'getCreateTime', self::MODEL_BOTH,'callback'), array('reply_time', 'getCreateTime', self::MODEL_INSERT,'callback'), array('update_time', NOW_TIME, self::MODEL_BOTH), array('status', 'getStatus', self::MODEL_BOTH, 'callback'), array('position', 'getPosition', self::MODEL_BOTH, 'callback'), array('deadline', 'strtotime', self::MODEL_BOTH, 'function'), ); public function lists($category, $order = '`id` DESC', $status = 1, $field = true, $limit = '10', $map = array()){ $map = array_merge($this->listMap($category, $status), $map); return $this->field($field)->where($map)->order($order)->limit($limit)->select(); } public function listCount($category, $status = 1, $map = array()){ $map = array_merge($this->listMap($category, $status), $map); return $this->where($map)->count('id'); } public function detail($id){ $info = $this->field(true)->find($id); if(!(is_array($info) || 1 !== $info['status'])){ $this->error = '文档被禁用或已删除！'; return false; } $logic = $this->logic($info['model_id']); $detail = $logic->detail($id); if(!$detail){ $this->error = $logic->getError(); return false; } $info = array_merge($info, $detail); return $info; } public function prev($info){ $map = array( 'id' => array('lt', $info['id']), 'category_id' => $info['category_id'], 'status' => 1, ); return $this->field(true)->where($map)->order('id DESC')->find(); } public function next($info){ $map = array( 'id' => array('gt', $info['id']), 'category_id' => $info['category_id'], 'status' => 1, ); return $this->field(true)->where($map)->order('id')->find(); } public function update($data = null){ $res = $this->checkDocumentType( I('type'), I('pid') ); if(!$res['status']){ $this->error = $res['info']; return false; } $data = $this->create($data); if(empty($data)){ return false; } if(empty($data['id'])){ $id = $this->add(); if(!$id){ $this->error = '新增基础内容出错！'; return false; } } else { $status = $this->save(); if(false === $status){ $this->error = '更新基础内容出错！'; return false; } } $logic = $this->logic($data['model_id']); if(!$logic->update($id)){ if(isset($id)){ $this->delete($id); } $this->error = $logic->getError(); return false; } hook('documentSaveComplete', array('model_id'=>$data['model_id'])); if($id){ action_log('add_document', 'document', $id, UID); } return $data; } public function part($id, $page = 1, $field = true, $logic = true){ $map = array('status' => 1, 'type' => 3, 'pid' => $id); $info = $this->field($field)->where($map)->page($page, 10)->order('id')->select(); if(!$info) { $this->error = '该文档没有段落！'; return false; } if(!$logic){ return $info; } $model = $logic = array(); foreach ($info as $value) { $model[$value['model_id']][] = $value['id']; } foreach ($model as $model_id => $ids) { $data = $this->logic($model_id)->lists($ids); $logic += $data; } foreach ($info as &$value) { $value = array_merge($value, $logic[$value['id']]); } return $info; } public function partCount($id){ $map = array('status' => 1, 'type' => 3, 'pid' => $id); return $this->where($map)->count('id'); } public function position($pos, $category = null, $limit = null, $field = true){ $map = $this->listMap($category, 1, $pos); is_numeric($limit) && $this->limit($limit); return $this->field($field)->where($map)->select(); } protected function getStatus(){ $id = I('post.id'); $cate = I('post.category_id'); if(empty($id)){ $status = 1; }else{ $status = $this->getFieldById($id, 'status'); if($status == 3){ $status = 1; } } return $status; } protected function getRoot(){ $pid = I('post.pid'); if($pid == 0){ return 0; } $p_root = $this->getFieldById($pid, 'root'); return $p_root == 0 ? $pid : $p_root; } protected function getCreateTime(){ $create_time = I('post.create_time'); return $create_time?strtotime($create_time):NOW_TIME; } public function checkCategory($id){ $publish = get_category($id, 'allow_publish'); return $publish ? true : false; } protected function checkModel($info){ $model = get_category($info['category_id'], 'model'); return in_array($info['model_id'], $model); } private function logic($model){ return D(get_document_model($model, 'name'), 'Logic'); } private function listMap($category, $status = 1, $pos = null){ $map = array('status' => $status); if(!is_null($category)){ if(is_numeric($category)){ $map['category_id'] = $category; } else { $map['category_id'] = array('in', str2arr($category)); } } if(is_numeric($pos)){ $map[] = "position & {$pos} = {$pos}"; } return $map; } protected function checkName(){ $name = I('post.name'); $pid = I('post.pid', 0); $id = I('post.id', 0); if($pid == 0){ $root = 0; }else{ $root = $this->getFieldById($pid, 'root'); $root = $root == 0 ? $pid : $root; } $map = array('root'=>$root, 'name'=>$name, 'id'=>array('neq',$id)); $res = $this->where($map)->getField('id'); if($res){ return false; } return true; } private function generateName(){ $str = 'abcdefghijklmnopqrstuvwxyz0123456789'; $min = 10; $max = 39; $name = false; while (true){ $length = rand($min, $max); $name = substr(str_shuffle(substr($str,0,26)), 0, 1); $name .= substr(str_shuffle($str), 0, $length); $res = $this->getFieldByName($name, 'id'); if(!$res){ break; } } return $name; } protected function getPosition(){ $position = I('post.position'); if(!is_array($position)){ return 0; }else{ $pos = 0; foreach ($position as $key=>$value){ $pos += $value; } return $pos; } } public function remove(){ if ( is_administrator() ) { $map = array('status'=>-1); }else{ $cate_ids = AuthGroupModel::getAuthCategories(UID); $map = array('status'=>-1,'category_id'=>array( 'IN',trim(implode(',',$cate_ids),',') )); } $base_list = $this->where($map)->field('id,model_id')->select(); $base_ids = array_column($base_list,'id'); $orphan = get_stemma( $base_ids,$this, 'id,model_id'); $all_list = array_merge( $base_list,$orphan ); foreach ($all_list as $key=>$value){ $logic = $this->logic($value['model_id']); $logic->delete($value['id']); } $ids = array_merge( $base_ids, (array)array_column($orphan,'id') ); if(!empty($ids)){ $res = $this->where( array( 'id'=>array( 'IN',trim(implode(',',$ids),',') ) ) )->delete(); } return $res; } protected function getLink(){ $link = I('post.link_id'); if(empty($link)){ return 0; } else if(is_numeric($link)){ return $link; } $res = D('Url')->update(array('url'=>$link)); return $res['id']; } public function autoSave(){ $post = I('post.'); $res = $this->checkDocumentType( I('type'), I('pid') ); if(!$res['status']){ $this->error = $res['info']; return false; } $save_list = array('name','title','description','position','link_id','cover_id','deadline','create_time','content'); foreach ($save_list as $value){ if(!empty($post[$value])){ $if_save = true; break; } } if(!$if_save){ $this->error = '您未填写任何内容'; return false; } $this->_validate = array( array('name', '/^[a-zA-Z]\w{0,39}$/', '文档标识不合法', self::VALUE_VALIDATE, 'regex', self::MODEL_BOTH), array('name', '', '标识已经存在', self::VALUE_VALIDATE, 'unique', self::MODEL_BOTH), array('title', '1,80', '标题长度不能超过80个字符', self::VALUE_VALIDATE, 'length', self::MODEL_BOTH), array('description', '1,140', '简介长度不能超过140个字符', self::VALUE_VALIDATE, 'length', self::MODEL_BOTH), array('category_id', 'require', '分类不能为空', self::MUST_VALIDATE , 'regex', self::MODEL_BOTH), array('category_id', 'checkCategory', '该分类不允许发布内容', self::EXISTS_VALIDATE , 'callback', self::MODEL_UPDATE), array('model_id,category_id', 'checkModel', '该分类没有绑定当前模型', self::MUST_VALIDATE , 'callback', self::MODEL_INSERT), array('deadline', '/^\d{4,4}-\d{1,2}-\d{1,2}(\s\d{1,2}:\d{1,2}(:\d{1,2})?)?$/', '日期格式不合法,请使用"年-月-日 时:分"格式,全部为数字', self::VALUE_VALIDATE , 'regex', self::MODEL_BOTH), array('create_time', '/^\d{4,4}-\d{1,2}-\d{1,2}(\s\d{1,2}:\d{1,2}(:\d{1,2})?)?$/', '日期格式不合法,请使用"年-月-日 时:分"格式,全部为数字', self::VALUE_VALIDATE , 'regex', self::MODEL_BOTH), ); $this->_auto[] = array('status', '3', self::MODEL_BOTH); if(!($data = $this->create())){ return false; } if(empty($data['id'])){ $id = $this->add(); if(!$id){ $this->error = '新增基础内容出错！'; return false; } $data['id'] = $id; } else { $status = $this->save(); if(false === $status){ $this->error = '更新基础内容出错！'; return false; } } $logic = $this->logic($data['model_id']); if(!$logic->autoSave($id)){ if(isset($id)){ $this->delete($id); } $this->error = $logic->getError(); return false; } return $data; } public function getDirectoryList($pid = null){ if(empty($pid)){ return false; } $tree = S('sys_directory_tree'); if(empty($tree)){ $res = $this->getChild($pid); S('sys_directory_tree', $tree); } return $res; } private function getChild($pid){ $tree = array(); $map = array('status'=>1,'type'=>1); if(is_array($pid)){ $map['pid'] = array('in', implode(',', $pid)); }else{ $map['pid'] = $pid; } $child = $this->where($map)->field('id,name,title,pid')->order('level DESC,id DESC')->select(); if(!empty($child)){ foreach ($child as $key=>$value){ $pids[] = $value['id']; } $tree = array_merge($child, $this->getChild($pids)); } return $tree; } public function checkDocumentType($type = null, $pid = null){ $res = array('status'=>1, 'info'=>''); if(empty($type)){ return array('status'=>0, 'info'=>'文档类型不能为空'); } if(empty($pid)){ return $res; } if(is_numeric($pid)){ $ptype = $this->getFieldById($pid, 'type'); }else{ $ptype = $this->getFieldByName($pid, 'type'); } if($ptype == 1){ return $res; } if($ptype == 2){ if($type != 3){ return array('status'=>0, 'info'=>'主题下面只允许添加段落'); }else{ return $res; } } if($ptype == 3){ return array('status'=>0, 'info'=>'段落下面不允许再添加子内容'); } return array('status'=>0, 'info'=>'父文档类型不正确'); } } 