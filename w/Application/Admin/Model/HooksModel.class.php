<?php
 namespace Admin\Model; use Think\Model; class HooksModel extends Model { protected function _after_find(&$result,$options) { } protected function _after_select(&$result,$options){ foreach($result as &$record){ $this->_after_find($record,$options); } } protected $_validate = array( array('name','require','钩子名称必须！'), array('description','require','钩子描述必须！'), ); protected $_auto = array( array('update_time', NOW_TIME, self::MODEL_BOTH), ); public function updateHooks($addons_name){ $addons_class = get_addon_class($addons_name); if(!class_exists($addons_class)){ $this->error = "未实现{$addons_name}插件的入口文件"; return false; } $methods = get_class_methods($addons_class); $hooks = $this->getField('name', true); $common = array_intersect($hooks, $methods); if(!empty($common)){ foreach ($common as $hook) { $flag = $this->updateAddons($hook, array($addons_name)); if(false === $flag){ $this->removeHooks($addons_name); return false; } } } else { $this->error = '插件未实现任何钩子'; return false; } return true; } public function updateAddons($hook_name, $addons_name){ $o_addons = $this->where("name='{$hook_name}'")->getField('addons'); if($o_addons) $o_addons = str2arr($o_addons); if($o_addons){ $addons = array_merge($o_addons, $addons_name); $addons = array_unique($addons); }else{ $addons = $addons_name; } $flag = D('Hooks')->where("name='{$hook_name}'") ->setField('addons',arr2str($addons)); if(false === $flag) D('Hooks')->where("name='{$hook_name}'")->setField('addons',arr2str($o_addons)); return $flag; } public function removeHooks($addons_name){ $addons_class = get_addon_class($addons_name); if(!class_exists($addons_class)){ return false; } $methods = get_class_methods($addons_class); $hooks = $this->getField('name', true); $common = array_intersect($hooks, $methods); if($common){ foreach ($common as $hook) { $flag = $this->removeAddons($hook, array($addons_name)); if(false === $flag){ return false; } } } return true; } public function removeAddons($hook_name, $addons_name){ $o_addons = $this->where("name='{$hook_name}'")->getField('addons'); $o_addons = str2arr($o_addons); if($o_addons){ $addons = array_diff($o_addons, $addons_name); }else{ return true; } $flag = D('Hooks')->where("name='{$hook_name}'") ->setField('addons',arr2str($addons)); if(false === $flag) D('Hooks')->where("name='{$hook_name}'") ->setField('addons',arr2str($o_addons)); return $flag; } } 