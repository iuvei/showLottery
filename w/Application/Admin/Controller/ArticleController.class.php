<?php
namespace Admin\Controller; use Admin\Model\AuthGroupModel; use Think\Page; class ArticleController extends AdminController { static protected $allow = array( 'draftbox','mydocument'); private $cate_id = null; protected function checkDynamic(){ if(IS_ROOT){ return true; } $cates = AuthGroupModel::getAuthCategories(UID); switch(strtolower(ACTION_NAME)){ case 'index': $cate_id = I('cate_id'); break; case 'edit': case 'update': $doc_id = I('id'); $cate_id = M('Document')->where(array('id'=>$doc_id))->getField('category_id'); break; case 'setstatus': case 'permit': $doc_id = (array)I('ids'); $cate_id = M('Document')->where(array('id'=>array('in',$doc_id)))->getField('category_id',true); $cate_id = array_unique($cate_id); break; } if(!$cate_id){ return null; }elseif( !is_array($cate_id) && in_array($cate_id,$cates) ) { return true; }elseif( is_array($cate_id) && $cate_id==array_intersect($cate_id,$cates) ){ return true; }else{ return false; } return null; } protected function getMenu(){ $cate_auth = AuthGroupModel::getAuthCategories(UID); $cate_auth = $cate_auth == null ? array() : $cate_auth; $cate = M('Category')->where(array('status'=>1))->field('id,title,pid,allow_publish')->order('pid,sort')->select(); if(!IS_ROOT){ foreach ($cate as $key=>$value){ if(!in_array($value['id'], $cate_auth)){ unset($cate[$key]); } } } $cate = list_to_tree($cate); $cate_id = I('param.cate_id'); $this->cate_id = $cate_id; $hide_cate = false; if(ACTION_NAME != 'recycle' && ACTION_NAME != 'draftbox' && ACTION_NAME != 'mydocument'){ $hide_cate = true; } foreach ($cate as $key=>&$value){ $value['url'] = 'Article/index?cate_id='.$value['id']; if($cate_id == $value['id'] && $hide_cate){ $value['current'] = true; }else{ $value['current'] = false; } if(!empty($value['_child'])){ $is_child = false; foreach ($value['_child'] as $ka=>&$va){ $va['url'] = 'Article/index?cate_id='.$va['id']; if(!empty($va['_child'])){ foreach ($va['_child'] as $k=>&$v){ $v['url'] = 'Article/index?cate_id='.$v['id']; $v['pid'] = $va['id']; $is_child = $v['id'] == $cate_id ? true : false; } } if($va['id'] == $cate_id || $is_child){ $is_child = false; if($hide_cate){ $value['current'] = true; $va['current'] = true; }else{ $value['current'] = false; $va['current'] = false; } }else{ $va['current'] = false; } } } } $this->assign('nodes', $cate); $this->assign('cate_id', $this->cate_id); $nav = get_parent_category($cate_id); $this->assign('rightNav', $nav); $show_recycle = $this->checkRule('Admin/article/recycle'); $this->assign('show_recycle', IS_ROOT || $show_recycle); $this->assign('show_draftbox', C('OPEN_DRAFTBOX')); } public function index($cate_id = null){ $this->getMenu(); if($cate_id===null){ $cate_id = $this->cate_id; } $model = M('Model')->getByName('document'); $fields = array(); $grids = preg_split('/[;\r\n]+/s', $model['list_grid']); foreach ($grids as &$value) { $val = explode(':', $value); $field = explode(',', $val[0]); $value = array('field' => $field, 'title' => $val[1]); if(isset($val[2])){ $value['href'] = $val[2]; preg_replace_callback('/\[([a-z_]+)\]/', function($match) use(&$fields){$fields[]=$match[1];}, $value['href']); } if(strpos($val[1],'|')){ list($value['title'],$value['format']) = explode('|',$val[1]); } foreach($field as $val){ $array = explode('|',$val); $fields[] = $array[0]; } } $fields = array_unique($fields); if(!empty($cate_id)){ $models = get_category($cate_id, 'model'); $allow_reply = get_category($cate_id, 'reply'); $pid = I('pid'); if ( $pid==0 ) { $template = $this->indexOfArticle( $cate_id ); $this->assign('model', explode(',',$models)); }else{ $doc_model = M('Document')->where(array('id'=>$pid))->find(); switch($doc_model['model_id']){ default: if($doc_model['type']==2 && $allow_reply){ $this->assign('model', array(2)); $template = $this->indexOfReply( $cate_id ); }else{ $this->assign('model', explode(',',$models)); $template = $this->indexOfArticle( $cate_id ); } } } $this->assign('list_grids', $grids); $this->assign('model_list', $model); Cookie('__forward__',$_SERVER['REQUEST_URI']); $this->display($template); }else{ $this->error('非法的文档分类'); } } protected function indexOfReply($cate_id) { $map = array(); if(isset($_GET['content'])){ $map['content'] = array('like', '%'.(string)I('content').'%'); } if(isset($_GET['status'])){ $map['status'] = I('status'); $status = $map['status']; }else{ $status = null; $map['status'] = array('in', '0,1,2'); } if ( !isset($_GET['pid']) ) { $map['pid'] = 0; } if ( isset($_GET['time-start']) ) { $map['update_time'][] = array('egt',strtotime(I('time-start'))); } if ( isset($_GET['time-end']) ) { $map['update_time'][] = array('elt',24*60*60 + strtotime(I('time-end'))); } if ( isset($_GET['username']) ) { $map['uid'] = M('UcenterMember')->where(array('username'=>I('username')))->getField('id'); } $Document = M('Document'); $map['category_id'] = $cate_id; $map['pid'] = I('pid',0); if($map['pid']){ unset($map['category_id']); } $prefix = C('DB_PREFIX'); $l_table = $prefix.('document'); $r_table = $prefix.('document_article'); $list = M() ->table( $l_table.' l' ) ->where( $map ) ->order( 'l.id DESC') ->join ( $r_table.' r ON l.id=r.id' ); $_REQUEST = array(); $list = $this->lists($list,null,null,null,'l.id id,l.pid pid,l.category_id,l.title title,l.update_time update_time,l.uid uid,l.status status,r.content content' ); int_to_string($list); if($map['pid']){ $article = $Document->field('id,title,type')->find($map['pid']); $this->assign('article',$article); } $allow_publish = get_category($cate_id, 'allow_publish'); $this->assign('status', $status); $this->assign('list', $list); $this->assign('allow', $allow_publish); $this->assign('pid', $map['pid']); $this->meta_title = '子文档列表'; return 'reply'; } protected function indexOfArticle($cate_id){ $map = array(); if(isset($_GET['title'])){ $map['title'] = array('like', '%'.(string)I('title').'%'); } if(isset($_GET['status'])){ $map['status'] = I('status'); $status = $map['status']; }else{ $status = null; $map['status'] = array('in', '0,1,2'); } if ( !isset($_GET['pid']) ) { $map['pid'] = 0; } if ( isset($_GET['time-start']) ) { $map['update_time'][] = array('egt',strtotime(I('time-start'))); } if ( isset($_GET['time-end']) ) { $map['update_time'][] = array('elt',24*60*60 + strtotime(I('time-end'))); } if ( isset($_GET['nickname']) ) { $map['uid'] = M('Member')->where(array('nickname'=>I('nickname')))->getField('uid'); } $Document = M('Document'); $map['category_id'] = $cate_id; $map['pid'] = I('pid',0); if($map['pid']){ unset($map['category_id']); } $list = $this->lists($Document,$map,'level DESC,id DESC'); int_to_string($list); if($map['pid']){ $article = $Document->field('id,title,type')->find($map['pid']); $this->assign('article',$article); } $allow_publish = get_category($cate_id, 'allow_publish'); $this->assign('status', $status); $this->assign('list', $list); $this->assign('allow', $allow_publish); $this->assign('pid', $map['pid']); $this->meta_title = '文档列表'; return 'index'; } public function setStatus($model='Document'){ return parent::setStatus('Document'); } public function add(){ $this->getMenu(); $cate_id = I('get.cate_id',0); $model_id = I('get.model_id',0); empty($cate_id) && $this->error('参数不能为空！'); empty($model_id) && $this->error('该分类未绑定模型！'); $allow_publish = D('Document')->checkCategory($cate_id); !$allow_publish && $this->error('该分类不允许发布内容！'); $model = get_document_model($model_id); $info['pid'] = $_GET['pid']?$_GET['pid']:0; $info['model_id'] = $model_id; $info['category_id'] = $cate_id; if($info['pid']){ $article = M('Document')->field('id,title,type')->find($info['pid']); $this->assign('article',$article); } $fields = get_model_attribute($model['id']); $this->assign('info', $info); $this->assign('fields', $fields); $this->assign('type_list', get_type_bycate($cate_id)); $this->assign('model', $model); $this->meta_title = '新增'.$model['title']; $this->display(); } public function edit(){ $this->getMenu(); $id = I('get.id',''); if(empty($id)){ $this->error('参数不能为空！'); } $Document = D('Document'); $data = $Document->detail($id); if(!$data){ $this->error($Document->getError()); } if($data['pid']){ $article = M('Document')->field('id,title,type')->find($data['pid']); $this->assign('article',$article); } $this->assign('data', $data); $this->assign('model_id', $data['model_id']); $model = get_document_model($data['model_id']); $this->assign('model', $model); $fields = get_model_attribute($model['id']); $this->assign('fields', $fields); $this->assign('type_list', get_type_bycate($data['category_id'])); $this->meta_title = '编辑文档'; $this->display(); } public function update(){ $res = D('Document')->update(); if(!$res){ $this->error(D('Document')->getError()); }else{ $this->success($res['id']?'更新成功':'新增成功', Cookie('__forward__')); } } public function batchOperate(){ $this->getMenu(); $pid = I('pid', 0); $cate_id = I('cate_id'); empty($cate_id) && $this->error('参数不能为空！'); $allow_publish = D('Document')->checkCategory($cate_id); !$allow_publish && $this->error('该分类不允许发布内容！'); if(IS_POST){ $model_id = I('model_id'); $type = 1; $content = I('content'); $_POST['content'] = ''; preg_match_all('/[^\r]+/', $content, $matchs); $list = $matchs[0]; foreach ($list as $value){ if(!empty($value) && (strpos($value, '|') !== false)){ $data = explode('|', str_replace(array("\r", "\r\n", "\n"), '', $value)); $data = array('name'=>$data[0], 'title'=>$data[1], 'category_id'=>$cate_id, 'model_id'=>$model_id); $data['description'] = ''; $data['pid'] = $pid; $data['type'] = $type; $_POST = $data; $res = D('Document')->update($data); } } if($res){ $this->success('批量导入成功！', U('index?pid='.$pid.'&cate_id='.$cate_id)); }else{ if(isset($res)){ $this->error(D('Document')->getError()); }else{ $this->error('批量导入失败，请检查内容格式！'); } } } $this->assign('pid', $pid); $this->assign('cate_id', $cate_id); $this->assign('type_list', get_type_bycate($cate_id)); $this->meta_title = '批量导入'; $this->display('batchoperate'); } public function examine(){ $this->getMenu(); $map['status'] = 2; if ( !IS_ROOT ) { $cate_auth = AuthGroupModel::getAuthCategories(UID); if($cate_auth){ $map['category_id'] = array('IN',$cate_auth); }else{ $map['category_id'] = -1; } } $list = $this->lists(M('Document'),$map,'update_time desc'); if(is_array($list)){ foreach ($list as $k=>&$v){ $v['username'] = get_nickname($v['uid']); } } $this->assign('list', $list); $this->meta_title = '待审核'; $this->display(); } public function recycle(){ $this->getMenu(); $map['status'] = -1; if ( !IS_ROOT ) { $cate_auth = AuthGroupModel::getAuthCategories(UID); if($cate_auth){ $map['category_id'] = array('IN',$cate_auth); }else{ $map['category_id'] = -1; } } $list = $this->lists(M('Document'),$map,'update_time desc'); if(is_array($list)){ foreach ($list as $k=>&$v){ $v['username'] = get_nickname($v['uid']); } } $this->assign('list', $list); $this->meta_title = '回收站'; $this->display(); } public function autoSave(){ $res = D('Document')->autoSave(); if($res !== false){ $return['data'] = $res; $return['info'] = '保存草稿成功'; $return['status'] = 1; $this->ajaxReturn($return); }else{ $this->error('保存草稿失败：'.D('Document')->getError()); } } public function draftBox(){ $this->getMenu(); $Document = D('Document'); $map = array('status'=>3,'uid'=>UID); $list = $this->lists($Document,$map); $this->assign('list', $list); $this->meta_title = '草稿箱'; $this->display(); } public function mydocument($status = null, $title = null){ $this->getMenu(); $Document = D('Document'); $map['uid'] = UID; if(isset($title)){ $map['title'] = array('like', '%'.$title.'%'); } if(isset($status)){ $map['status'] = $status; }else{ $map['status'] = array('in', '0,1,2'); } if ( isset($_GET['time-start']) ) { $map['update_time'][] = array('egt',strtotime(I('time-start'))); } if ( isset($_GET['time-end']) ) { $map['update_time'][] = array('elt',24*60*60 + strtotime(I('time-end'))); } $map['pid'] = 0; $list = $this->lists($Document,$map,'update_time desc'); int_to_string($list); Cookie('__forward__',$_SERVER['REQUEST_URI']); $this->assign('status', $status); $this->assign('list', $list); $this->meta_title = '我的文档'; $this->display(); } public function permit(){ $ids = I('param.ids'); if(empty($ids)){ $this->error('请选择要操作的数据'); } $Model = 'Document'; $map = array(); if(is_array($ids)){ $map['id'] = array('in', $ids); }elseif (is_numeric($ids)){ $map['id'] = $ids; } $this->restore($Model,$map); } public function clear(){ $res = D('Document')->remove(); if($res !== false){ $this->success('清空回收站成功！'); }else{ $this->error('清空回收站失败！'); } } public function move() { if(empty($_POST['ids'])) { $this->error('请选择要移动的文档！'); } session('moveArticle', $_POST['ids']); session('copyArticle', null); $this->success('请选择要移动到的分类！'); } public function copy() { if(empty($_POST['ids'])) { $this->error('请选择要复制的文档！'); } session('copyArticle', $_POST['ids']); session('moveArticle', null); $this->success('请选择要复制到的分类！'); } public function paste() { $moveList = session('moveArticle'); $copyList = session('copyArticle'); if(empty($moveList) && empty($copyList)) { $this->error('没有选择文档！'); } if(!isset($_POST['cate_id'])) { $this->error('请选择要粘贴到的分类！'); } $cate_id = I('post.cate_id'); $pid = I('post.pid', 0); $check = $this->checkPaste(empty($moveList) ? $copyList : $moveList, $cate_id, $pid); if(!$check['status']){ $this->error($check['info']); } if(!empty($moveList)) { foreach ($moveList as $key=>$value){ $Model = M('Document'); $map['id'] = $value; $data['category_id']= $cate_id; $data['pid'] = $pid; if($pid == 0){ $data['root'] = 0; }else{ $p_root = $Model->getFieldById($pid, 'root'); $data['root'] = $p_root == 0 ? $pid : $p_root; } $res = $Model->where($map)->save($data); } session('moveArticle', null); if(false !== $res){ $this->success('文档移动成功！'); }else{ $this->error('文档移动失败！'); } }elseif(!empty($copyList)){ foreach ($copyList as $key=>$value){ $Model = M('Document'); $data = $Model->find($value); unset($data['id']); unset($data['name']); $data['category_id'] = $cate_id; $data['pid'] = $pid; $data['create_time'] = NOW_TIME; $data['update_time'] = NOW_TIME; if($pid == 0){ $data['root'] = 0; }else{ $p_root = $Model->getFieldById($pid, 'root'); $data['root'] = $p_root == 0 ? $pid : $p_root; } $result = $Model->add($data); if($result){ $logic = D(get_document_model($data['model_id'],'name'),'Logic'); $data = $logic->detail($value); $data['id'] = $result; $res = $logic->add($data); } } session('copyArticle', null); if($res){ $this->success('文档复制成功！'); }else{ $this->error('文档复制失败！'); } } } protected function checkPaste($list, $cate_id, $pid){ $return = array('status'=>1); $Document = D('Document'); $modelList = M('Category')->getFieldById($cate_id,'model'); foreach ($list as $key=>$value){ if($value == $pid){ $return['status'] = 0; $return['info'] = '不能将编号为 '.$value.' 的数据粘贴为他的子内容！'; return $return; } $modelType = $Document->getFieldById($value,'model_id'); if(!in_array($modelType,explode(',',$modelList))) { $return['status'] = 0; $return['info'] = '当前分类的文档模型不支持编号为 '.$value.' 的数据！'; return $return; } } $typeList = M('Category')->getFieldById($cate_id,'type'); foreach ($list as $key=>$value){ $modelType = $Document->getFieldById($value,'type'); if(!in_array($modelType,explode(',',$typeList))) { $return['status'] = 0; $return['info'] = '当前分类的文档类型不支持编号为 '.$value.' 的数据！'; return $return; } $res = $Document->checkDocumentType($modelType, $pid); if(!$res['status']){ $return['status'] = 0; $return['info'] = $res['info'].'。错误数据编号：'.$value; return $return; } } return $return; } public function sort(){ if(IS_GET){ $this->getMenu(); $ids = I('get.ids'); $cate_id = I('get.cate_id'); $pid = I('get.pid'); $map['status'] = array('gt',-1); if(!empty($ids)){ $map['id'] = array('in',$ids); }else{ if($cate_id !== ''){ $map['category_id'] = $cate_id; } if($pid !== ''){ $map['pid'] = $pid; } } $list = M('Document')->where($map)->field('id,title')->order('level DESC,id DESC')->select(); $this->assign('list', $list); $this->meta_title = '文档排序'; $this->display(); }elseif (IS_POST){ $ids = I('post.ids'); $ids = array_reverse(explode(',', $ids)); foreach ($ids as $key=>$value){ $res = M('Document')->where(array('id'=>$value))->setField('level', $key+1); } if($res !== false){ $this->success('排序成功！'); }else{ $this->eorror('排序失败！'); } }else{ $this->error('非法请求！'); } } } 