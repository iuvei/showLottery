<?php
 const ONETHINK_VERSION = '1.0.131218'; const ONETHINK_ADDON_PATH = './Addons/'; function is_login(){ $user = session('user_auth'); if (empty($user)) { return 0; } else { return session('user_auth_sign') == data_auth_sign($user) ? $user['uid'] : 0; } } function is_administrator($uid = null){ $uid = is_null($uid) ? is_login() : $uid; return $uid && (intval($uid) === C('USER_ADMINISTRATOR')); } function str2arr($str, $glue = ','){ return explode($glue, $str); } function arr2str($arr, $glue = ','){ return implode($glue, $arr); } function msubstr($str, $start=0, $length, $charset="utf-8", $suffix=true) { if(function_exists("mb_substr")) $slice = mb_substr($str, $start, $length, $charset); elseif(function_exists('iconv_substr')) { $slice = iconv_substr($str,$start,$length,$charset); if(false === $slice) { $slice = ''; } }else{ $re['utf-8'] = "/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]{2}|[\xf0-\xff][\x80-\xbf]{3}/"; $re['gb2312'] = "/[\x01-\x7f]|[\xb0-\xf7][\xa0-\xfe]/"; $re['gbk'] = "/[\x01-\x7f]|[\x81-\xfe][\x40-\xfe]/"; $re['big5'] = "/[\x01-\x7f]|[\x81-\xfe]([\x40-\x7e]|\xa1-\xfe])/"; preg_match_all($re[$charset], $str, $match); $slice = join("",array_slice($match[0], $start, $length)); } return $suffix ? $slice.'...' : $slice; } function think_encrypt($data, $key = '', $expire = 0) { $key = md5(empty($key) ? C('DATA_AUTH_KEY') : $key); $data = base64_encode($data); $x = 0; $len = strlen($data); $l = strlen($key); $char = ''; for ($i = 0; $i < $len; $i++) { if ($x == $l) $x = 0; $char .= substr($key, $x, 1); $x++; } $str = sprintf('%010d', $expire ? $expire + time():0); for ($i = 0; $i < $len; $i++) { $str .= chr(ord(substr($data, $i, 1)) + (ord(substr($char, $i, 1)))%256); } return str_replace(array('+','/','='),array('-','_',''),base64_encode($str)); } function think_decrypt($data, $key = ''){ $key = md5(empty($key) ? C('DATA_AUTH_KEY') : $key); $data = str_replace(array('-','_'),array('+','/'),$data); $mod4 = strlen($data) % 4; if ($mod4) { $data .= substr('====', $mod4); } $data = base64_decode($data); $expire = substr($data,0,10); $data = substr($data,10); if($expire > 0 && $expire < time()) { return ''; } $x = 0; $len = strlen($data); $l = strlen($key); $char = $str = ''; for ($i = 0; $i < $len; $i++) { if ($x == $l) $x = 0; $char .= substr($key, $x, 1); $x++; } for ($i = 0; $i < $len; $i++) { if (ord(substr($data, $i, 1))<ord(substr($char, $i, 1))) { $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1))); }else{ $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1))); } } return base64_decode($str); } function data_auth_sign($data) { if(!is_array($data)){ $data = (array)$data; } ksort($data); $code = http_build_query($data); $sign = sha1($code); return $sign; } function list_sort_by($list,$field, $sortby='asc') { if(is_array($list)){ $refer = $resultSet = array(); foreach ($list as $i => $data) $refer[$i] = &$data[$field]; switch ($sortby) { case 'asc': asort($refer); break; case 'desc': arsort($refer); break; case 'nat': natcasesort($refer); break; } foreach ( $refer as $key=> $val) $resultSet[] = &$list[$key]; return $resultSet; } return false; } function list_to_tree($list, $pk='id', $pid = 'pid', $child = '_child', $root = 0) { $tree = array(); if(is_array($list)) { $refer = array(); foreach ($list as $key => $data) { $refer[$data[$pk]] =& $list[$key]; } foreach ($list as $key => $data) { $parentId = $data[$pid]; if ($root == $parentId) { $tree[] =& $list[$key]; }else{ if (isset($refer[$parentId])) { $parent =& $refer[$parentId]; $parent[$child][] =& $list[$key]; } } } } return $tree; } function tree_to_list($tree, $child = '_child', $order='id', &$list = array()){ if(is_array($tree)) { $refer = array(); foreach ($tree as $key => $value) { $reffer = $value; if(isset($reffer[$child])){ unset($reffer[$child]); tree_to_list($value[$child], $child, $order, $list); } $list[] = $reffer; } $list = list_sort_by($list, $order, $sortby='asc'); } return $list; } function format_bytes($size, $delimiter = '') { $units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB'); for ($i = 0; $size >= 1024 && $i < 5; $i++) $size /= 1024; return round($size, 2) . $delimiter . $units[$i]; } function set_redirect_url($url){ cookie('redirect_url', $url); } function get_redirect_url(){ $url = cookie('redirect_url'); return empty($url) ? __APP__ : $url; } function hook($hook,$params=array()){ \Think\Hook::listen($hook,$params); } function get_addon_class($name){ $class = "Addons\\{$name}\\{$name}Addon"; return $class; } function get_addon_config($name){ $class = get_addon_class($name); if(class_exists($class)) { $addon = new $class(); return $addon->getConfig(); }else { return array(); } } function addons_url($url, $param = array()){ $url = parse_url($url); $case = C('URL_CASE_INSENSITIVE'); $addons = $case ? parse_name($url['scheme']) : $url['scheme']; $controller = $case ? parse_name($url['host']) : $url['host']; $action = trim($case ? strtolower($url['path']) : $url['path'], '/'); if(isset($url['query'])){ parse_str($url['query'], $query); $param = array_merge($query, $param); } $params = array( '_addons' => $addons, '_controller' => $controller, '_action' => $action, ); $params = array_merge($params, $param); return U('Addons/execute', $params); } function time_format($time = NULL,$format='Y-m-d H:i'){ $time = $time === NULL ? NOW_TIME : intval($time); return date($format, $time); } function get_username($uid = 0){ static $list; if(!($uid && is_numeric($uid))){ return session('user_auth.username'); } if(empty($list)){ $list = S('sys_active_user_list'); } $key = "u{$uid}"; if(isset($list[$key])){ $name = $list[$key]; } else { $User = new User\Api\UserApi(); $info = $User->info($uid); if($info && isset($info[1])){ $name = $list[$key] = $info[1]; $count = count($list); $max = C('USER_MAX_CACHE'); while ($count-- > $max) { array_shift($list); } S('sys_active_user_list', $list); } else { $name = ''; } } return $name; } function get_nickname($uid = 0){ static $list; if(!($uid && is_numeric($uid))){ return session('user_auth.username'); } if(empty($list)){ $list = S('sys_user_nickname_list'); } $key = "u{$uid}"; if(isset($list[$key])){ $name = $list[$key]; } else { $info = M('Member')->field('nickname')->find($uid); if($info !== false && $info['nickname'] ){ $nickname = $info['nickname']; $name = $list[$key] = $nickname; $count = count($list); $max = C('USER_MAX_CACHE'); while ($count-- > $max) { array_shift($list); } S('sys_user_nickname_list', $list); } else { $name = ''; } } return $name; } function get_category($id, $field = null){ static $list; if(empty($id) || !is_numeric($id)){ return ''; } if(empty($list)){ $list = S('sys_category_list'); } if(!isset($list[$id])){ $cate = M('Category')->find($id); if(!$cate || 1 != $cate['status']){ return ''; } $list[$id] = $cate; S('sys_category_list', $list); } return is_null($field) ? $list[$id] : $list[$id][$field]; } function get_category_name($id){ return get_category($id, 'name'); } function get_category_title($id){ return get_category($id, 'title'); } function get_document_model($id = null, $field = null){ static $list; if(!(is_numeric($id) || is_null($id))){ return ''; } if(empty($list)){ $list = S('DOCUMENT_MODEL_LIST'); } if(empty($list)){ $map = array('status' => 1, 'extend' => 1); $model = M('Model')->where($map)->field(true)->select(); foreach ($model as $value) { $list[$value['id']] = $value; } S('DOCUMENT_MODEL_LIST', $list); } if(is_null($id)){ return $list; } elseif(is_null($field)){ return $list[$id]; } else { return $list[$id][$field]; } } function ubb($data){ return $data; } function action_log($action = null, $model = null, $record_id = null, $user_id = null){ if(empty($action) || empty($model) || empty($record_id)){ return '参数不能为空'; } if(empty($user_id)){ $user_id = is_login(); } $action_info = M('Action')->getByName($action); if($action_info['status'] != 1){ return '该行为被禁用或删除'; } $data['action_id'] = $action_info['id']; $data['user_id'] = $user_id; $data['action_ip'] = ip2long(get_client_ip()); $data['model'] = $model; $data['record_id'] = $record_id; $data['create_time'] = NOW_TIME; if(!empty($action_info['log'])){ if(preg_match_all('/\[(\S+?)\]/', $action_info['log'], $match)){ $log['user'] = $user_id; $log['record'] = $record_id; $log['model'] = $model; $log['time'] = NOW_TIME; $log['data'] = array('user'=>$user_id,'model'=>$model,'record'=>$record_id,'time'=>NOW_TIME); foreach ($match[1] as $value){ $param = explode('|', $value); if(isset($param[1])){ $replace[] = call_user_func($param[1],$log[$param[0]]); }else{ $replace[] = $log[$param[0]]; } } $data['remark'] = str_replace($match[0], $replace, $action_info['log']); }else{ $data['remark'] = $action_info['log']; } }else{ $data['remark'] = '操作url：'.$_SERVER['REQUEST_URI']; } M('ActionLog')->add($data); if(!empty($action_info['rule'])){ $rules = parse_action($action, $user_id); $res = execute_action($rules, $action_info['id'], $user_id); } } function parse_action($action = null, $self){ if(empty($action)){ return false; } if(is_numeric($action)){ $map = array('id'=>$action); }else{ $map = array('name'=>$action); } $info = M('Action')->where($map)->find(); if(!$info || $info['status'] != 1){ return false; } $rules = $info['rule']; $rules = str_replace('{$self}', $self, $rules); $rules = explode(';', $rules); $return = array(); foreach ($rules as $key=>&$rule){ $rule = explode('|', $rule); foreach ($rule as $k=>$fields){ $field = empty($fields) ? array() : explode(':', $fields); if(!empty($field)){ $return[$key][$field[0]] = $field[1]; } } if(!array_key_exists('cycle', $return[$key]) || !array_key_exists('max', $return[$key])){ unset($return[$key]['cycle'],$return[$key]['max']); } } return $return; } function execute_action($rules = false, $action_id = null, $user_id = null){ if(!$rules || empty($action_id) || empty($user_id)){ return false; } $return = true; foreach ($rules as $rule){ $map = array('action_id'=>$action_id, 'user_id'=>$user_id); $map['create_time'] = array('gt', NOW_TIME - intval($rule['cycle']) * 3600); $exec_count = M('ActionLog')->where($map)->count(); if($exec_count > $rule['max']){ continue; } $Model = M(ucfirst($rule['table'])); $field = $rule['field']; $res = $Model->where($rule['condition'])->setField($field, array('exp', $rule['rule'])); if(!$res){ $return = false; } } return $return; } function create_dir_or_files($files){ foreach ($files as $key => $value) { if(substr($value, -1) == '/'){ mkdir($value); }else{ @file_put_contents($value, ''); } } } if(!function_exists('array_column')){ function array_column(array $input, $columnKey, $indexKey = null) { $result = array(); if (null === $indexKey) { if (null === $columnKey) { $result = array_values($input); } else { foreach ($input as $row) { $result[] = $row[$columnKey]; } } } else { if (null === $columnKey) { foreach ($input as $row) { $result[$row[$indexKey]] = $row; } } else { foreach ($input as $row) { $result[$row[$indexKey]] = $row[$columnKey]; } } } return $result; } } function get_table_name($model_id = null){ if(empty($model_id)){ return false; } $Model = M('Model'); $name = ''; $info = $Model->getById($model_id); if($info['extend'] != 0){ $name = $Model->getFieldById($info['extend'], 'name').'_'; } $name .= $info['name']; return $name; } function get_model_attribute($model_id, $group = true){ static $list; if(empty($model_id) || !is_numeric($model_id)){ return ''; } if(empty($list)){ $list = S('attribute_list'); } if(!isset($list[$model_id])){ $map = array('model_id'=>$model_id); $extend = M('Model')->getFieldById($model_id,'extend'); if($extend){ $map = array('model_id'=> array("in", array($model_id, $extend))); } $info = M('Attribute')->where($map)->select(); $list[$model_id] = $info; } $attr = array(); foreach ($list[$model_id] as $value) { $attr[$value['id']] = $value; } if($group){ $sort = M('Model')->getFieldById($model_id,'field_sort'); if(empty($sort)){ $group = array(1=>array_merge($attr)); }else{ $group = json_decode($sort, true); $keys = array_keys($group); foreach ($group as &$value) { foreach ($value as $key => $val) { $value[$key] = $attr[$val]; unset($attr[$val]); } } if(!empty($attr)){ $group[$keys[0]] = array_merge($group[$keys[0]], $attr); } } $attr = $group; } return $attr; } function api($name,$vars=array()){ $array = explode('/',$name); $method = array_pop($array); $classname = array_pop($array); $module = $array? array_pop($array) : 'Common'; $callback = $module.'\\Api\\'.$classname.'Api::'.$method; if(is_string($vars)) { parse_str($vars,$vars); } return call_user_func_array($callback,$vars); } function get_table_field($value = null, $condition = 'id', $field = null, $table = null){ if(empty($value) || empty($table)){ return false; } $map[$condition] = $value; $info = M(ucfirst($table))->where($map); if(empty($field)){ $info = $info->field(true)->find(); }else{ $info = $info->getField($field); } return $info; } function get_link($link_id = null, $field = 'url'){ $link = ''; if(empty($link_id)){ return $link; } $link = M('Url')->getById($link_id); if(empty($field)){ return $link; }else{ return $link[$field]; } } function get_cover($cover_id, $field = null){ if(empty($cover_id)){ return false; } $picture = M('Picture')->where(array('status'=>1))->getById($cover_id); return empty($field) ? $picture : $picture[$field]; } function check_document_position($pos = 0, $contain = 0){ if(empty($pos) || empty($contain)){ return false; } $res = $pos & $contain; if($res !== 0){ return true; }else{ return false; } } function get_stemma($pids,Model &$model, $field='id'){ $collection = array(); if(empty($pids)){ return $collection; } if( is_array($pids) ){ $pids = trim(implode(',',$pids),','); } $result = $model->field($field)->where(array('pid'=>array('IN',(string)$pids)))->select(); $child_ids = array_column ((array)$result,'id'); while( !empty($child_ids) ){ $collection = array_merge($collection,$result); $result = $model->field($field)->where( array( 'pid'=>array( 'IN', $child_ids ) ) )->select(); $child_ids = array_column((array)$result,'id'); } return $collection; } function Add_S(&$array){ if (is_array($array)) { foreach ($array as $key => $value) { if (!is_array($value)) { $array[$key] = wjStrFilter(addslashes($value)); } else { Add_S($array[$key]); } } } } function get_int($number) { return intval($number); } function get_str($string) { if (!get_magic_quotes_gpc()) { return addslashes($string); } return $string; } function wjStrFilter($str,$pi_Def="",$pi_iType=1){ if ( isset($_GET[$str]) ) $str = trim($_GET[$str]); else if ( isset($_POST[$str])) $str = trim($_POST[$str]); else if ($str) $str = trim($str); else return $pi_Def; if ($pi_iType==0) { if (is_numeric($str)) return $str; else return $pi_Def; } if($str){ $str=preg_replace("/insert/i", "",$str); $str=preg_replace("/update/i", "",$str); $str=preg_replace("/delete/i", "",$str); $str=preg_replace("/exec/i", "",$str); } return $str; } function getMillisecond() { list($s1, $s2) = explode(' ', microtime()); return (float)sprintf('%.0f', (floatval($s1) + floatval($s2)) * 1000); }