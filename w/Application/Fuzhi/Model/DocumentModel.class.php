<?php
 namespace Fuzhi\Model; use Think\Model; use Think\Page; class DocumentModel extends Model{ protected $_validate = array( array('name', '/^[a-zA-Z]\w{0,30}$/', '文档标识不合法', self::VALUE_VALIDATE, 'regex', self::MODEL_BOTH), array('name', '', '标识已经存在', self::VALUE_VALIDATE, 'unique', self::MODEL_BOTH), array('title', 'require', '标题不能为空', self::VALUE_VALIDATE, 'regex', self::MODEL_BOTH), array('category_id', 'require', '分类不能为空', self::MUST_VALIDATE , 'regex', self::MODEL_INSERT), array('category_id', 'require', '分类不能为空', self::EXISTS_VALIDATE , 'regex', self::MODEL_UPDATE), array('category_id,type', 'checkCategory', '内容类型不正确', self::MUST_VALIDATE , 'callback', self::MODEL_INSERT), array('category_id', 'checkCategory', '该分类不允许发布内容', self::EXISTS_VALIDATE , 'callback', self::MODEL_BOTH), array('model_id,category_id', 'checkModel', '该分类没有绑定当前模型', self::MUST_VALIDATE , 'callback', self::MODEL_INSERT), ); protected $_auto = array( array('uid', 'session', self::MODEL_INSERT, 'function', 'user_auth.uid'), array('title', 'htmlspecialchars', self::MODEL_BOTH, 'function'), array('description', 'htmlspecialchars', self::MODEL_BOTH, 'function'), array('root', 'getRoot', self::MODEL_BOTH, 'callback'), array('attach', 0, self::MODEL_INSERT), array('view', 0, self::MODEL_INSERT), array('comment', 0, self::MODEL_INSERT), array('extend', 0, self::MODEL_INSERT), array('create_time', NOW_TIME, self::MODEL_INSERT), array('reply_time', NOW_TIME, self::MODEL_INSERT), array('update_time', NOW_TIME, self::MODEL_BOTH), array('status', 'getStatus', self::MODEL_BOTH, 'callback'), ); public $page = ''; public function lists($category, $order = '`id` DESC', $status = 1, $field = true){ $map = $this->listMap($category, $status); return $this->field($field)->where($map)->order($order)->select(); } public function listCount($category, $status = 1){ $map = $this->listMap($category, $status); return $this->where($map)->count('id'); } public function detail($id){ $info = $this->field(true)->find($id); if(!(is_array($info) || 1 !== $info['status'])){ $this->error = '文档被禁用或已删除！'; return false; } $logic = $this->logic($info['model_id']); $detail = $logic->detail($id); if(!$detail){ $this->error = $logic->getError(); return false; } return array_merge($info, $detail); } public function prev($info){ $map = array( 'id' => array('lt', $info['id']), 'pid' => 0, 'category_id' => $info['category_id'], 'status' => 1, ); return $this->field(true)->where($map)->order('id DESC')->find(); } public function next($info){ $map = array( 'id' => array('gt', $info['id']), 'pid' => 0, 'category_id' => $info['category_id'], 'status' => 1, ); return $this->field(true)->where($map)->order('id')->find(); } public function update(){ $Model = new \Admin\Model\DocumentModel(); $res = $Model->checkDocumentType( I('type'), I('pid') ); if(!$res['status']){ $this->error = $res['info']; return false; } $data = $this->field('pos,display', true)->create(); if(empty($data)){ return false; } if(empty($data['id'])){ $id = $this->add(); if(!$id){ $this->error = '添加基础内容出错！'; return false; } $data['id'] = $id; } else { $status = $this->save(); if(false === $status){ $this->error = '更新基础内容出错！'; return false; } } $logic = $this->logic($data['model_id']); if(!$logic->update($data['id'])){ if(isset($id)){ $this->delete($data['id']); } $this->error = $logic->getError(); return false; } return $data; } public function part($id, $page = 1, $field = true, $logic = true){ $map = array('status' => 1, 'pid' => $id, 'type' => 3); $info = $this->field($field)->where($map)->page($page, 10)->order('id')->select(); if(!$info) { $this->error = '该文档没有段落！'; return false; } if(!$logic){ return $info; } $model = $logic = array(); foreach ($info as $value) { $model[$value['model_id']][] = $value['id']; } foreach ($model as $model_id => $ids) { $data = $this->logic($model_id)->lists($ids); $logic += $data; } foreach ($info as &$value) { $value = array_merge($value, $logic[$value['id']]); } return $info; } public function partCount($id){ $map = array('status' => 1, 'pid' => $id, 'type' => 3); return $this->where($map)->count('id'); } public function position($pos, $category = null, $limit = null, $field = true){ $map = $this->listMap($category, 1, $pos); is_numeric($limit) && $this->limit($limit); return $this->field($field)->where($map)->select(); } protected function getStatus(){ $cate = I('post.category_id'); $check = M('Category')->getFieldById($cate, 'check'); if($check){ $status = 2; }else{ $status = 1; } return $status; } protected function getRoot(){ $pid = I('post.pid'); if($pid == 0){ return 0; } $p_root = $this->getFieldById($pid, 'root'); return $p_root == 0 ? $pid : $p_root; } protected function checkCategory($id){ if(is_array($id)){ $type = get_category($id['category_id'], 'type'); return in_array($id['type'], $type); } else { $publish = get_category($id, 'allow_publish'); return $publish ? true : false; } } protected function checkModel($info){ $model = get_category($info['category_id'], 'model'); return in_array($info['model_id'], $model); } private function logic($model){ return D(get_document_model($model, 'name'), 'Logic'); } private function listMap($category, $status = 1, $pos = null){ $map = array('status' => $status, 'pid' => 0); if(!is_null($category)){ if(is_numeric($category)){ $map['category_id'] = $category; } else { $map['category_id'] = array('in', str2arr($category)); } } $map['create_time'] = array('lt', NOW_TIME); $map['_string'] = 'deadline = 0 OR deadline > ' . NOW_TIME; if(is_numeric($pos)){ $map[] = "position & {$pos} = {$pos}"; } return $map; } } 