<?php
namespace User\Model; use Think\Model; class UcenterMemberModel extends Model{ protected $tablePrefix = UC_TABLE_PREFIX; protected $connection = UC_DB_DSN; protected $_validate = array( array('username', '1,30', -1, self::EXISTS_VALIDATE, 'length'), array('username', 'checkDenyMember', -2, self::EXISTS_VALIDATE, 'callback'), array('username', '', -3, self::EXISTS_VALIDATE, 'unique'), array('password', '6,30', -4, self::EXISTS_VALIDATE, 'length'), array('email', 'email', -5, self::EXISTS_VALIDATE), array('email', '1,32', -6, self::EXISTS_VALIDATE, 'length'), array('email', 'checkDenyEmail', -7, self::EXISTS_VALIDATE, 'callback'), array('email', '', -8, self::EXISTS_VALIDATE, 'unique'), array('mobile', '//', -9, self::EXISTS_VALIDATE), array('mobile', 'checkDenyMobile', -10, self::EXISTS_VALIDATE, 'callback'), array('mobile', '', -11, self::EXISTS_VALIDATE, 'unique'), ); protected $_auto = array( array('password', 'think_ucenter_md5', self::MODEL_BOTH, 'function', UC_AUTH_KEY), array('reg_time', NOW_TIME, self::MODEL_INSERT), array('reg_ip', 'get_client_ip', self::MODEL_INSERT, 'function', 1), array('update_time', NOW_TIME), array('status', 'getStatus', self::MODEL_BOTH, 'callback'), ); protected function checkDenyMember($username){ return true; } protected function checkDenyEmail($email){ return true; } protected function checkDenyMobile($mobile){ return true; } protected function getStatus(){ return true; } public function register($username, $password, $email, $mobile){ $data = array( 'username' => $username, 'password' => $password, 'email' => $email, 'mobile' => $mobile, ); if(empty($data['mobile'])) unset($data['mobile']); if($this->create($data)){ $uid = $this->add(); return $uid ? $uid : 0; } else { return $this->getError(); } } public function login($username, $password, $type = 1){ $map = array(); switch ($type) { case 1: $map['username'] = $username; break; case 2: $map['email'] = $username; break; case 3: $map['mobile'] = $username; break; case 4: $map['id'] = $username; break; default: return 0; } $user = $this->where($map)->find(); if(is_array($user) && $user['status']){ if(think_ucenter_md5($password, UC_AUTH_KEY) === $user['password']){ $this->updateLogin($user['id']); return $user['id']; } else { return -2; } } else { return -1; } } public function info($uid, $is_username = false){ $map = array(); if($is_username){ $map['username'] = $uid; } else { $map['id'] = $uid; } $user = $this->where($map)->field('id,username,email,mobile,status')->find(); if(is_array($user) && $user['status'] = 1){ return array($user['id'], $user['username'], $user['email'], $user['mobile']); } else { return -1; } } public function checkField($field, $type = 1){ $data = array(); switch ($type) { case 1: $data['username'] = $field; break; case 2: $data['email'] = $field; break; case 3: $data['mobile'] = $field; break; default: return 0; } return $this->create($data) ? 1 : $this->getError(); } protected function updateLogin($uid){ $data = array( 'id' => $uid, 'last_login_time' => NOW_TIME, 'last_login_ip' => get_client_ip(1), ); $this->save($data); } public function updateUserFields($uid, $password, $data){ if(empty($uid) || empty($password) || empty($data)){ $this->error = '参数错误！'; return false; } if(!$this->verifyUser($uid, $password)){ $this->error = '验证出错：密码不正确！'; return false; } $data = $this->create($data); if($data){ return $this->where(array('id'=>$uid))->save($data); } return false; } protected function verifyUser($uid, $password_in){ $password = $this->getFieldById($uid, 'password'); if(think_ucenter_md5($password_in, UC_AUTH_KEY) === $password){ return true; } return false; } } 